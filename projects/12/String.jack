// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents a String object. Implements the String type.
 */
class String {
	field int length_, max_length_;
	field int string;

    /** Constructs a new empty String with a maximum length of maxLength. */
    constructor String new(int maxLength) {
		let length_ = 0;
		let max_length_ = maxLength;
		if(0 < max_length_) {
			let string = Array.new(max_length_);
		}
		return this;
    }

    /** De-allocates the string and frees its space. */
    method void dispose() {
		let length_ = 0;
		let max_length_ = 0;
		if(0 < max_length_) {
			do Array.despose(string);
		}
		return;
    }

    /** Returns the current length of this String. */
    method int length() {
		return length_;
    }

    /** Returns the character at location j. */
    method char charAt(int j) {
    	return string[j];
    }

    /** Sets the j'th character of this string to be c. */
    method void setCharAt(int j, char c) {
    	let string[j] = c;
    	return;
    }

    /** Appends the character c to the end of this String.
     *  Returns this string as the return value. */
    method String appendChar(char c) {
		let string[length_] = c;
		let length_ = length_ + 1;
    	return this;
    }

    /** Erases the last character from this String. */
    method void eraseLastChar() {
		let length_ = length_ - 1;
    	return;
    }

    /** Returns the integer value of this String until the first non
     *  numeric character. */
    method int intValue() {
		var boolean negative;
		var int d, v;
		var int i;
		
		let d = 0;
		
		// Sign judgement
		if(string[0] = 45) { // 45 is the ASCII code for '-'
			let negative = true;
			let i = 1;
		} else {
			let negative = false;
			let i = 0;
		}
		
		while(i < length_) {
			if((47 < string[i]) & (string[i] < 58)) {
				let d = string[i] - 48;
				let v = (v * 10) + d;
			}
			let i = i + 1;
		}
		
		if(negative) {
			let v = -v;
		}
    	return v;
    }

    /** Sets this String to hold a representation of the given number. */
    method void setInt(int number) {
		let length_ = 0;
		
		if(number < 0) {
			do appendChar(45);
			do setInt_recursive(-number);
		} else {
			do setInt_recursive(number);
		}
		
		return;
	}
	
	method void setInt_recursive(int number) {
		var int c;
		
		let c = Math.mod(number, 10);
		if(number < 10) {
			do appendChar(c + 48);
			return;
		}
		do setInt_recursive(number / 10);
		do appendChar(c + 48);
		
    	return;
    }

    /** Returns the new line character. */
    function char newLine() {
    	return 128; // LF only. No CR
    }

    /** Returns the backspace character. */
    function char backSpace() {
    	return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
    	return 34;
    }
}
